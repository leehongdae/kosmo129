/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.87
 * Generated at: 2023-06-22 09:13:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.chat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>Insert title here</title>\r\n");
      out.write("		<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("		<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("		$(document).ready(function(){\r\n");
      out.write("			\r\n");
      out.write("			//채팅 서버 주소\r\n");
      out.write("			let url = \"ws://localhost:8088/kosSpring/chatserver\";\r\n");
      out.write("			\r\n");
      out.write("			// 웹 소켓\r\n");
      out.write("			let ws;\r\n");
      out.write("			\r\n");
      out.write("			// 연결하기\r\n");
      out.write("			$('#btnConnect').click(function() {\r\n");
      out.write("				alert();\r\n");
      out.write("				// 유저명 확인\r\n");
      out.write("			   	if ($('#user').val().trim() != '') {\r\n");
      out.write("			   		// 연결\r\n");
      out.write("				   	ws = new WebSocket(url);\r\n");
      out.write("				   			\r\n");
      out.write("				   	// 소켓 이벤트 매핑\r\n");
      out.write("				   	ws.onopen = function (evt) {\r\n");
      out.write("				   		// console.log('서버 연결 성공');\r\n");
      out.write("				   		print($('#user').val(), '입장했습니다.');\r\n");
      out.write("				   				\r\n");
      out.write("				   		// 현재 사용자가 입장했다고 서버에게 통지(유저명 전달)\r\n");
      out.write("				   		// -> 1#유저명\r\n");
      out.write("						ws.send('1#' + $('#user').val() + '#');\r\n");
      out.write("								\r\n");
      out.write("						$('#user').attr('readonly', true);\r\n");
      out.write("						$('#btnConnect').attr('disabled', true);\r\n");
      out.write("						$('#btnDisconnect').attr('disabled', false);\r\n");
      out.write("						$('#msg').attr('disabled', false);\r\n");
      out.write("						$('#msg').focus();\r\n");
      out.write("					};\r\n");
      out.write("			        \r\n");
      out.write("					ws.onmessage = function (evt) {\r\n");
      out.write("						// print('', evt.data);\r\n");
      out.write("						let index = evt.data.indexOf(\"#\", 2);\r\n");
      out.write("						let no = evt.data.substring(0, 1); \r\n");
      out.write("						let user = evt.data.substring(2, index);\r\n");
      out.write("						let txt = evt.data.substring(index + 1);\r\n");
      out.write("				   				\r\n");
      out.write("						if (no == '1') {\r\n");
      out.write("							print2(user);\r\n");
      out.write("						} else if (no == '2') {\r\n");
      out.write("							print(user, txt);\r\n");
      out.write("						} else if (no == '3') {\r\n");
      out.write("							print3(user);\r\n");
      out.write("						}\r\n");
      out.write("						$('#list').scrollTop($('#list').prop('scrollHeight'));\r\n");
      out.write("					};\r\n");
      out.write("				   			\r\n");
      out.write("					ws.onclose = function (evt) {\r\n");
      out.write("						console.log('소켓이 닫힙니다.');\r\n");
      out.write("					};\r\n");
      out.write("			\r\n");
      out.write("					ws.onerror = function (evt) {\r\n");
      out.write("						console.log(evt.data);\r\n");
      out.write("					};\r\n");
      out.write("				} else {\r\n");
      out.write("					alert('유저명을 입력하세요.');\r\n");
      out.write("					$('#user').focus();\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			// 메세지 전송 및 아이디\r\n");
      out.write("			function print(user, txt) {\r\n");
      out.write("				let temp = '';\r\n");
      out.write("				temp += '<div style=\"margin-bottom:3px;\">';\r\n");
      out.write("				temp += '[' + user + '] ';\r\n");
      out.write("				temp += txt;\r\n");
      out.write("				temp += ' <span style=\"font-size:11px;color:#777;\">' + new Date().toLocaleTimeString() + '</span>';\r\n");
      out.write("				temp += '</div>';\r\n");
      out.write("						\r\n");
      out.write("				$('#list').append(temp);\r\n");
      out.write("			}\r\n");
      out.write("					\r\n");
      out.write("			// 다른 client 접속		\r\n");
      out.write("			function print2(user) {\r\n");
      out.write("				let temp = '';\r\n");
      out.write("				temp += '<div style=\"margin-bottom:3px;\">';\r\n");
      out.write("				temp += \"'\" + user + \"' 이(가) 접속했습니다.\" ;\r\n");
      out.write("				temp += ' <span style=\"font-size:11px;color:#777;\">' + new Date().toLocaleTimeString() + '</span>';\r\n");
      out.write("				temp += '</div>';\r\n");
      out.write("						\r\n");
      out.write("				$('#list').append(temp);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// client 접속 종료\r\n");
      out.write("			function print3(user) {\r\n");
      out.write("				let temp = '';\r\n");
      out.write("				temp += '<div style=\"margin-bottom:3px;\">';\r\n");
      out.write("				temp += \"'\" + user + \"' 이(가) 종료했습니다.\" ;\r\n");
      out.write("				temp += ' <span style=\"font-size:11px;color:#777;\">' + new Date().toLocaleTimeString() + '</span>';\r\n");
      out.write("				temp += '</div>';\r\n");
      out.write("						\r\n");
      out.write("				$('#list').append(temp);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			$('#user').keydown(function() {\r\n");
      out.write("				if (event.keyCode == 13) {\r\n");
      out.write("					$('#btnConnect').click();\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("			$('#msg').keydown(function() {\r\n");
      out.write("				if (event.keyCode == 13) {\r\n");
      out.write("							\r\n");
      out.write("					//서버에게 메시지 전달\r\n");
      out.write("					//2#유저명#메시지\r\n");
      out.write("					ws.send('2#' + $('#user').val() + '#' + $(this).val()); //서버에게\r\n");
      out.write("					print($('#user').val(), $(this).val()); //본인 대화창에\r\n");
      out.write("					\r\n");
      out.write("			        $('#msg').val('');\r\n");
      out.write("					$('#msg').focus();\r\n");
      out.write("							\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("					\r\n");
      out.write("			$('#btnDisconnect').click(function() {\r\n");
      out.write("				ws.send('3#' + $('#user').val() + '#');\r\n");
      out.write("				ws.close();\r\n");
      out.write("						\r\n");
      out.write("				$('#user').attr('readonly', false);\r\n");
      out.write("			    $('#user').val('');\r\n");
      out.write("						\r\n");
      out.write("				$('#btnConnect').attr('disabled', false);\r\n");
      out.write("				$('#btnDisconnect').attr('disabled', true);\r\n");
      out.write("						\r\n");
      out.write("				$('#msg').val('');\r\n");
      out.write("				$('#msg').attr('disabled', true);\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		   		\r\n");
      out.write("		</script>\r\n");
      out.write("		\r\n");
      out.write("	</head>\r\n");
      out.write("	\r\n");
      out.write("	<body>\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<h1 class=\"page-header\">Chat</h1>\r\n");
      out.write("			<table class=\"table table-bordered\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td><input type=\"text\" name=\"user\" id=\"user\" class=\"form-control\" placeholder=\"유저명\"></td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-default\" id=\"btnConnect\">연결</button>\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-default\" id=\"btnDisConnect\">종료</button>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\"><div id=\"list\"></div></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\"><input type=\"text\" name=\"msg\" id=\"msg\" placeholder=\"대화내용을 입력하세요.\" class=\"form-control\" disabled></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</div>\r\n");
      out.write("	\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
